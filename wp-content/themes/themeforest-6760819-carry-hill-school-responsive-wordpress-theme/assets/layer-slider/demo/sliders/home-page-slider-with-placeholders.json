[{"properties":{"post_type":["portfolio"],"post_categories":["1"],"post_taxonomy":"0","post_orderby":"date","post_order":"DESC","post_offset":"-1","title":"Home Page Slider (with placeholders)","width":"100%","height":"400","maxwidth":"","forceresponsive":"on","responsiveunder":"980","sublayercontainer":"980","autostart":"on","firstlayer":"1","animatefirstlayer":"on","keybnav":"on","touchnav":"on","loops":"0","forceloopnum":"on","twowayslideshow":"on","skin":"noskin","backgroundcolor":"","backgroundimage":"","sliderstyle":"margin-bottom: 0px;","navprevnext":"on","navstartstop":"on","navbuttons":"on","hoverprevnext":"on","thumb_nav":"hover","thumb_container_width":"60%","thumb_width":"100","thumb_height":"60","thumb_active_opacity":"35","thumb_inactive_opacity":"100","autoplayvideos":"on","autopauseslideshow":"auto","youtubepreview":"maxresdefault.jpg","imgpreload":"on","yourlogoId":"","yourlogo":"","yourlogostyle":"left: 10px; top: 10px;","yourlogolink":"","yourlogotarget":"_self","cbinit":"function(element) { }","cbstart":"function(data) { }","cbstop":"function(data) { }","cbpause":"function(data) { }","cbanimstart":"function(data) { }","cbanimstop":"function(data) { }","cbprev":"function(data) { }","cbnext":"function(data) { }"},"layers":[{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"","thumbnailId":"","thumbnail":"","slidedelay":"4000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"rainbow","media":"img","type":"p","imageId":"233","image":"http:\/\/showcase.themesonwheels.com\/carry-hill\/wp-content\/uploads\/sites\/3\/2014\/01\/rainbow.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"273px","left":"80px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"stars","media":"img","type":"p","imageId":"","image":"http:\/\/showcase.themesonwheels.com\/carry-hill\/wp-content\/uploads\/sites\/3\/2013\/11\/doodle.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"300\\\",\\\"easingin\\\":\\\"easeInOutElastic\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"70px","left":"669px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"boy","media":"img","type":"p","imageId":"448","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/boy-shadow.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"21px","left":"677px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Lets learn together","media":"text","type":"h1","imageId":"","image":"","html":"Lets learn together","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"119px","left":"57px","style":"","id":"","class":"ch-slider-title-italic","title":"","alt":"","rel":""},{"subtitle":"Meet Friends","media":"text","type":"h1","imageId":"","image":"","html":"Meet friends","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"155px","left":"27px","style":"","id":"","class":"ch-slider-title-big","title":"","alt":"","rel":""},{"subtitle":"Are you looking for...","media":"text","type":"h5","imageId":"","image":"","html":"Are you looking for people that have a lot in common?","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"255px","left":"28px","style":"","id":"","class":"ch-slider-border-title","title":"","alt":"","rel":""},{"subtitle":"Join our elementary school","media":"text","type":"h4","imageId":"","image":"","html":"Join our elementary school","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"90px","left":"26px","style":"","id":"","class":"ch-slider-title-italic","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"","thumbnailId":"","thumbnail":"","slidedelay":"8000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"bg","media":"img","type":"p","imageId":"380","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/Slajd-01.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"-145px","left":"-462px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"kids","media":"img","type":"p","imageId":"442","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/kids.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"400\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"2\\\"}","url":"","target":"_self","styles":"{}","top":"-55px","left":"263px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"grass 1","media":"img","type":"p","imageId":"327","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/03\/grass-1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"200\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{}","top":"251px","left":"-122px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"grass 2","media":"img","type":"p","imageId":"328","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/03\/grass-2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"200\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{}","top":"163px","left":"644px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"flowers","media":"img","type":"p","imageId":"335","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/03\/flowers.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"200\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"4\\\"}","url":"","target":"_self","styles":"{}","top":"242px","left":"642px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"grass 1-1","media":"img","type":"p","imageId":"329","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/03\/grass-1-1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"200\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"8\\\"}","url":"","target":"_self","styles":"{}","top":"167px","left":"-160px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"grass 2-1","media":"img","type":"p","imageId":"330","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/03\/grass-2-1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"200\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"8\\\"}","url":"","target":"_self","styles":"{}","top":"210px","left":"565px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"butterfly","media":"img","type":"p","imageId":"332","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/03\/butterfly.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"-300\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-300\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"10\\\"}","url":"","target":"_self","styles":"{}","top":"88px","left":"879px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"butterfly and flower","media":"img","type":"p","imageId":"333","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/03\/butterfly-and-flower.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"200\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"5\\\"}","url":"","target":"_self","styles":"{}","top":"208px","left":"6px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Meet Friends","media":"text","type":"h5","imageId":"","image":"","html":"Meet \r\nFriends","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"6\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"0\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-bottom\\\":\\\"0\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lifestyle Rounded M54\\\",\\\"font-size\\\":\\\"35\\\",\\\"color\\\":\\\"#f5f3f0\\\",\\\"background\\\":\\\"#55adad\\\",\\\"border-radius\\\":\\\"2\\\"}","top":"112px","left":"19px","wordwrap":"on","style":"font-weight: normal;text-shadow: none;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Join our elementary school","media":"text","type":"h4","imageId":"","image":"","html":"Join our elementary school.","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"6\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Arvo\\\",\\\"font-size\\\":\\\"24px\\\"}","top":"172px","left":"20px","style":"font-weight: normal;text-shadow: none;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Leaves","media":"img","type":"p","imageId":"381","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/Slajd-02.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"6\\\"}","url":"","target":"_self","styles":"{}","top":"-43px","left":"101px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Leaves 2","media":"img","type":"p","imageId":"381","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/Slajd-02.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"6\\\"}","url":"","target":"_self","styles":"{}","top":"-58px","left":"367px","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"3,4","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"","thumbnailId":"","thumbnail":"","slidedelay":"8000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"background","media":"img","type":"p","imageId":"387","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/bg-img-clouds.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"-145px","left":"-464px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"cloud right 01","media":"img","type":"p","imageId":"388","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/cloud01.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"500\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"10000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-500\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"8\\\"}","url":"","target":"_self","styles":"{}","top":"243px","left":"867px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"cloud right 02","media":"img","type":"p","imageId":"391","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/cloud04.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"500\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"10000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-500\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"8\\\"}","url":"","target":"_self","styles":"{}","top":"0px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"cloud right 03","media":"img","type":"p","imageId":"389","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/cloud02.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-1500\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"10000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-500\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"8\\\"}","url":"","target":"_self","styles":"{}","top":"37px","left":"885px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"cloud 01","media":"img","type":"p","imageId":"388","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/cloud01.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-1500\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"10000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"500\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"8\\\"}","url":"","target":"_self","styles":"{}","top":"-83px","left":"-240px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"cloud 02","media":"img","type":"p","imageId":"389","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/cloud02.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-500\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"10000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"500\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"8\\\"}","url":"","target":"_self","styles":"{}","top":"100px","left":"-95px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"cloud 03","media":"img","type":"p","imageId":"390","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/cloud03.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"500\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"10000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-500\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"8\\\"}","url":"","target":"_self","styles":"{}","top":"168px","left":"98px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"cloud 04","media":"img","type":"p","imageId":"391","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/cloud04.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"500\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"10000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-500\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"8\\\"}","url":"","target":"_self","styles":"{}","top":"140px","left":"233px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"1st image","media":"img","type":"p","imageId":"433","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/image01.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"500\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-500\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"5000\\\",\\\"easingout\\\":\\\"easeInOutElastic\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"56px","left":"355px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"3rd image","media":"img","type":"p","imageId":"436","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/image04.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"500\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"750\\\",\\\"easingin\\\":\\\"easeInOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-500\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"5000\\\",\\\"easingout\\\":\\\"easeInOutElastic\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"79px","left":"725px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"4th image","media":"img","type":"p","imageId":"435","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/image03.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"400\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutElastic\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"400\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"5000\\\",\\\"easingout\\\":\\\"easeInOutElastic\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"36px","left":"593px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"2nd image","media":"img","type":"p","imageId":"434","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/image02.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"-500\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1250\\\",\\\"easingin\\\":\\\"easeInOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"500\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"5000\\\",\\\"easingout\\\":\\\"easeInOutElastic\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"80px","left":"465px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Inspirational","media":"text","type":"h5","imageId":"","image":"","html":"  Inspirational  ","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lifestyle Rounded M54\\\",\\\"font-size\\\":\\\"35\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#55adad\\\",\\\"border-radius\\\":\\\"1\\\"}","top":"74px","left":"21px","wordwrap":"on","style":"font-weight: normal;text-shadow: none;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"test button","media":"text","type":"p","imageId":"","image":"","html":"<a class=\\\"cbp_widget_link\\\" href=\\\"http:\/\/showcase.aislinthemes.com\/carry-hill\/about\/\\\" style=\\\"padding:10px 20px\\\">Read More<\/a>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"409px","left":"37px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Join our school","media":"text","type":"h2","imageId":"","image":"","html":"Join our school","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Arvo\\\",\\\"font-size\\\":\\\"24px\\\",\\\"color\\\":\\\"#6e6e6e\\\"}","top":"135px","left":"25px","style":"font-weight: normal;text-shadow: none;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Welcome text","media":"text","type":"p","imageId":"","image":"","html":"Welcome to Carry Hill, a place \r\nwhere ","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"200\\\",\\\"height\\\":\\\"80\\\",\\\"font-family\\\":\\\"Arvo\\\",\\\"font-size\\\":\\\"14\\\"}","top":"182px","left":"25px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"natural curiosity text","media":"text","type":"p","imageId":"","image":"","html":"natural curiosity and \r\nimagination lead to","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Arvo\\\"}","top":"204px","left":"26px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"discovery text","media":"text","type":"p","imageId":"","image":"","html":"discovery in learners of all ages.  ","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Arvo\\\"}","top":"225px","left":"26px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"test button 2","media":"text","type":"p","imageId":"","image":"","html":"<a class=\\\"cbp_widget_link\\\" href=\\\"http:\/\/showcase.aislinthemes.com\/carry-hill\/about\/\\\" style=\\\"padding:10px 25px\\\">Read More<\/a>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"261px","left":"30px","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"","thumbnailId":"","thumbnail":"","slidedelay":"4000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"rainbow","media":"img","type":"p","imageId":"233","image":"http:\/\/showcase.themesonwheels.com\/carry-hill\/wp-content\/uploads\/sites\/3\/2014\/01\/rainbow.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"276px","left":"55px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Phone","media":"img","type":"p","imageId":"447","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/hand.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"-90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"-90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"17px","left":"555px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Fun","media":"text","type":"h1","imageId":"","image":"","html":"Fun","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"48px","left":"20px","style":"","id":"","class":"ch-slider-title-big","title":"","alt":"","rel":""},{"subtitle":"Activities","media":"text","type":"h1","imageId":"","image":"","html":"Activities","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"125px","left":"22px","style":"","id":"","class":"ch-slider-title-big","title":"","alt":"","rel":""},{"subtitle":"Sports.Crafts...","media":"text","type":"h3","imageId":"","image":"","html":"Sports.Crafts.Handmade.Football.Pool","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"232px","left":"20px","style":"","id":"","class":"ch-slider-border-title","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"","thumbnailId":"","thumbnail":"","slidedelay":"8000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"background","media":"img","type":"p","imageId":"393","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/bg.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"-20px","left":"-476px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"rainbow","media":"img","type":"p","imageId":"408","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/rainbow-bigger.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"203px","left":"-492px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"blackboard","media":"img","type":"p","imageId":"397","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/blackboard.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"400\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-400\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutElastic\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"16px","left":"208px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"our features","media":"img","type":"p","imageId":"398","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/our-features.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"400\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"600\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-400\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"58px","left":"306px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"drag and drop","media":"img","type":"p","imageId":"441","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/check.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"1000\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-1000\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutElastic\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"173px","left":"294px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"colors","media":"img","type":"p","imageId":"441","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/check.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"1000\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-1000\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"210px","left":"295px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"premium slider","media":"img","type":"p","imageId":"441","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/check.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"1000\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-1000\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"243px","left":"296px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"fonts","media":"img","type":"p","imageId":"441","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/check.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"277px","left":"297px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"girl","media":"img","type":"p","imageId":"438","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/girl2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"400\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-400\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutElastic\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{}","top":"17px","left":"627px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"boy","media":"img","type":"p","imageId":"437","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/boy.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"400\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1200\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-400\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{}","top":"10px","left":"125px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"boy front","media":"img","type":"p","imageId":"440","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/boy-right.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"4\\\"}","url":"","target":"_self","styles":"{}","top":"-31px","left":"747px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"book","media":"img","type":"p","imageId":"409","image":"http:\/\/showcase.aislinthemes.com\/carry-hill\/wp-content\/uploads\/sites\/2\/2014\/04\/bookblur.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"5\\\"}","url":"","target":"_self","styles":"{}","top":"182px","left":"-121px","style":"","id":"","class":"","title":"","alt":"","rel":""}]}]}]